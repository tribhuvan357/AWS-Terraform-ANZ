<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  AWS Terraform Notes >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
aws configure
where terraform
choco upgrade terraform -y  => Run as a admin from CMD/Powershell
terraform version
terraform -version


Terraform Config
. It uses .tf extension
. Format is HCL (Hashicorp Config Language)
Â· Declarative Language
Â· State Management


=> AWS EC2 with terraform

main.tf
variables.tf
provider.tf
resource.tf
terraform.tfstate
terraform.tfstate.backup
.terraform.lock.hcl
.terraform.tfstate.lock.info
{"ID":"48a0ab83-7e31-6c11-4b72-0e88e2d354d9","Operation":"OperationTypeApply","Info":"","Who":"Tribhuvan_PC\\Tribhuvan@Tribhuvan_PC","Version":"1.12.2","Created":"2025-08-10T07:57:59.3343403Z","Path":"terraform.tfstate"}
.terraform\providers\registry.terraform.io\hashicorp\aws\6.7.0\windows_amd64 => LICENSE and terraform-provider-aws_v6.7.0_x5


=> Terraform execution command

terraform init
terraform plan    => if we made changes we need to plan everytime else it will execute old/previous code
terraform apply
terraform apply -auto-approve
terraform destroy
terraform destroy -auto-approve
terraform validate
terraform fmt     => For the coorect formate


=> Github repo repository name

tribhuvan357/AWS-Terraform-ANZ 
https://github.com/tribhuvan357/AWS-Terraform-ANZ

----------------------------------------------------------------------------------------------------------------------------------------------

<<<<<<<<<< Terraform Resource >>>>>>>>>>

Definition: A resource block creates and manages infrastructure in AWS (or any provider).

Use Case: When you want Terraform to provision, update, or delete something.

Example: Creating an EC2 instance.

resource "aws_instance" "web" {
  ami           = "ami-0abcdef1234567890"
  instance_type = "t2.micro"
}


ðŸ‘‰ This creates an EC2 instance. If you run terraform destroy, Terraform will also delete it.

<<<<<<<<<< Terraform Data Source >>>>>>>>>>>>

Definition: A data block reads and fetches existing information from the provider without creating anything.

Use Case: When you need to use already existing resources (not managed by Terraform).

Example: Fetching the latest Amazon Linux AMI ID.

data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}


ðŸ‘‰ This does not create an AMI â€” it only looks up the latest AMI ID from AWS so you can use it in your resources:

resource "aws_instance" "web" {
  ami           = data.aws_ami.amazon_linux.id
  instance_type = "t2.micro"
}

----------------------------------------------------------------------------------------------------------------------------------------------

vol-0cdabccda027cb76e /dev/xvda 20  => EC2 storage console details

[root@ip-172-31-14-57 ~]# df -hT    => EC2 linux server OS level storage details
Filesystem       Type      Size  Used Avail Use% Mounted on
devtmpfs         devtmpfs  4.0M     0  4.0M   0% /dev
tmpfs            tmpfs     453M     0  453M   0% /dev/shm
tmpfs            tmpfs     181M  436K  181M   1% /run
/dev/nvme0n1p1   xfs        20G  1.7G   19G   9% /
tmpfs            tmpfs     453M     0  453M   0% /tmp
/dev/nvme0n1p128 vfat       10M  1.3M  8.7M  13% /boot/efi
tmpfs            tmpfs      91M     0   91M   0% /run/user/1000
[root@ip-172-31-14-57 ~]#
[root@ip-172-31-14-57 ~]# lsblk
NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS
nvme0n1       259:0    0  20G  0 disk
â”œâ”€nvme0n1p1   259:1    0  20G  0 part /
â”œâ”€nvme0n1p127 259:2    0   1M  0 part
â””â”€nvme0n1p128 259:3    0  10M  0 part /boot/efi
[root@ip-172-31-14-57 ~]#
[root@ip-172-31-14-57 ~]#
-----------------------------------------------------------------------------------------------------------

=> Resource Change

We can change the AMI ID/image and instance type to the current/prevoius terraform file and do terraform apply which will destroy the current ec2 server and make the ec2 server with given details

=> Resource Destroy 

=> More about TF Config

State Management

The state file (terraform.tfstate) maintains a detailed record of the current state of managed resources

This state file can be stored locally or remotely, with remote storage options enabling collaboration by sharing the state across teams and environments.

=> Terraform Variable

Input variables => are like function arguments.
Output values   => are like function return values.
Local values    => are like a function's temporary local variables.

=> Terraform Output
To print the public/private, ami id and provisioning server aws instance id etc in terraform cli 

=> AWS Resource S3 bucket and Ramdom Provider(for bucket name)
AWS S3 (Amazon Simple Storage Service) is a scalable, high-speed, web-based cloud storage service designed for online backup and archiving of data and applications.


=============================================================================================================================
<<<<<< Github Repo >>>>>

Note:- always first create repo manually on github portal and then follow the below steps

git init
git remote add origin https://github.com/tribhuvan357/AWS-Terraform-ANZ.git
git pull origin master
git status
git commit -m "all ANZ AWS terraform pracs"
git status
pwd
git add .
git status
git commit -m "all ANZ AWS terraform pracs"
git status
git push -u origin master



=============================================================================================================================

=> Remote State Management
Done => github updated


=> Project static website host
Done => github updated


=> AWS VPC via Terraform
Done => AWS Manual Lab

=> VPC Creation Terraform Config

Exercise on VPC:

Â· A VPC with a CIDR block of 10.0.0.0/16.
Â· One public subnet with a CIDR block of 10.0.1.0/24.
Â· One private subnet with a CIDR block of 10.0.2.0/24.
Â· One Internet Gateway.
Â· One public route table with a route to the Internet Gateway,
  and the correct association between the public subnet and the public route table.

Done => AWS lab performed for VPC Terraform

=> EC2 instance using our VPC Terraform
Done =>  AWS VPC Manual Lab 

=> Project (EC2+VPC+NGINX)
Project: VPC + EC2 + NGINX + HTTP Access:

Â· A VPC with pubic and private subnet
Â· A EC2 instance using public subnet we created.
Â· Setup nginx webserver
Â· Create security group rule to enable HTTP access
Â· Output the webserver URL on terminal

=> Lab done

=> Terraform Data Source

It allows you to fetch and use information from
Â· external sources or
Â· existing resources within your cloud infrastructure.

Useful for obtaining dynamic data that you need for our configurations.
Note:-> How to get the dynamic data from data source

=> Lab pending
# Note: It might occur charges so be wise

=> Data Source (VPC and SG)
=> Lab pending

=> EC2 create using data source

Data Source TASK:
=>Create an EC2 instance using existing
-VPC
-private-subnets
-security-group

=> Code and Lab pending

=> Terraform Variable





